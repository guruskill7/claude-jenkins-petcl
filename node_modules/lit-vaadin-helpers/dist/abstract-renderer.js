import { nothing } from 'lit';
import { Directive, PartType } from 'lit/directive.js';
// A sentinel that indicates renderer hasn't been initialized
const initialValue = {};
export class AbstractRendererDirective extends Directive {
    constructor(part) {
        super(part);
        this.previousValue = initialValue;
        if (part.type !== PartType.ELEMENT) {
            throw new Error('renderer only supports binding to element');
        }
    }
    render(_renderer, _value) {
        return nothing;
    }
    update(part, [renderer, value]) {
        var _a;
        const firstRender = this.previousValue === initialValue;
        if (!this.hasChanged(value)) {
            return nothing;
        }
        // Copy the value if it's an array so that if it's mutated we don't forget
        // what the previous values were.
        this.previousValue = Array.isArray(value) ? Array.from(value) : value;
        const element = part.element;
        // TODO: support re-assigning renderer function.
        if (firstRender) {
            const host = (_a = part.options) === null || _a === void 0 ? void 0 : _a.host;
            this.addRenderer(element, renderer, { host });
        }
        else {
            this.runRenderer(element);
        }
        return nothing;
    }
    hasChanged(value) {
        let result = true;
        if (Array.isArray(value)) {
            // Dirty-check arrays by item
            if (Array.isArray(this.previousValue) &&
                this.previousValue.length === value.length &&
                value.every((v, i) => v === this.previousValue[i])) {
                result = false;
            }
        }
        else if (this.previousValue === value) {
            // Dirty-check non-arrays by identity
            result = false;
        }
        return result;
    }
}
//# sourceMappingURL=abstract-renderer.js.map