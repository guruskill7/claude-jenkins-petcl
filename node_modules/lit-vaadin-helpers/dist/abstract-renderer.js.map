{"version":3,"file":"abstract-renderer.js","sourceRoot":"","sources":["../src/abstract-renderer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAiC,MAAM,KAAK,CAAC;AAC7D,OAAO,EAAE,SAAS,EAAyB,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAK9E,6DAA6D;AAC7D,MAAM,YAAY,GAAG,EAAE,CAAC;AAExB,MAAM,OAAgB,yBAGpB,SAAQ,SAAS;IAGjB,YAAY,IAAc;QACxB,KAAK,CAAC,IAAI,CAAC,CAAC;QAHd,kBAAa,GAAY,YAAY,CAAC;QAIpC,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,OAAO,EAAE;YAClC,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAC9D;IACH,CAAC;IAED,MAAM,CAAC,SAAY,EAAE,MAAgB;QACnC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,MAAM,CAAC,IAAiB,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAe;;QACvD,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,KAAK,YAAY,CAAC;QAExD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAC3B,OAAO,OAAO,CAAC;SAChB;QAED,0EAA0E;QAC1E,iCAAiC;QACjC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QAEtE,MAAM,OAAO,GAAG,IAAI,CAAC,OAAY,CAAC;QAElC,gDAAgD;QAChD,IAAI,WAAW,EAAE;YACf,MAAM,IAAI,GAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,IAAI,CAAC;YAChC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;SAC/C;aAAM;YACL,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;SAC3B;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,UAAU,CAAC,KAAc;QACvB,IAAI,MAAM,GAAG,IAAI,CAAC;QAElB,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACxB,6BAA6B;YAC7B,IACE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC;gBACjC,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;gBAC1C,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAM,IAAI,CAAC,aAAgC,CAAC,CAAC,CAAC,CAAC,EACtE;gBACA,MAAM,GAAG,KAAK,CAAC;aAChB;SACF;aAAM,IAAI,IAAI,CAAC,aAAa,KAAK,KAAK,EAAE;YACvC,qCAAqC;YACrC,MAAM,GAAG,KAAK,CAAC;SAChB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CAWF","sourcesContent":["import { nothing, RenderOptions, TemplateResult } from 'lit';\nimport { Directive, ElementPart, PartInfo, PartType } from 'lit/directive.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type AbstractLitRenderer = (...args: any[]) => TemplateResult;\n\n// A sentinel that indicates renderer hasn't been initialized\nconst initialValue = {};\n\nexport abstract class AbstractRendererDirective<\n  T extends Element,\n  R extends AbstractLitRenderer\n> extends Directive {\n  previousValue: unknown = initialValue;\n\n  constructor(part: PartInfo) {\n    super(part);\n    if (part.type !== PartType.ELEMENT) {\n      throw new Error('renderer only supports binding to element');\n    }\n  }\n\n  render(_renderer: R, _value?: unknown): typeof nothing {\n    return nothing;\n  }\n\n  update(part: ElementPart, [renderer, value]: [R, unknown]): unknown {\n    const firstRender = this.previousValue === initialValue;\n\n    if (!this.hasChanged(value)) {\n      return nothing;\n    }\n\n    // Copy the value if it's an array so that if it's mutated we don't forget\n    // what the previous values were.\n    this.previousValue = Array.isArray(value) ? Array.from(value) : value;\n\n    const element = part.element as T;\n\n    // TODO: support re-assigning renderer function.\n    if (firstRender) {\n      const host = part.options?.host;\n      this.addRenderer(element, renderer, { host });\n    } else {\n      this.runRenderer(element);\n    }\n\n    return nothing;\n  }\n\n  hasChanged(value: unknown): boolean {\n    let result = true;\n\n    if (Array.isArray(value)) {\n      // Dirty-check arrays by item\n      if (\n        Array.isArray(this.previousValue) &&\n        this.previousValue.length === value.length &&\n        value.every((v, i) => v === (this.previousValue as Array<unknown>)[i])\n      ) {\n        result = false;\n      }\n    } else if (this.previousValue === value) {\n      // Dirty-check non-arrays by identity\n      result = false;\n    }\n    return result;\n  }\n\n  /**\n   * Set renderer callback to the element.\n   */\n  abstract addRenderer(element: T, renderer: R, options: RenderOptions): void;\n\n  /**\n   * Run renderer callback on the element.\n   */\n  abstract runRenderer(element: T): void;\n}\n"]}