import { nothing, RenderOptions, TemplateResult } from 'lit';
import { Directive, ElementPart, PartInfo } from 'lit/directive.js';
export declare type AbstractLitRenderer = (...args: any[]) => TemplateResult;
export declare abstract class AbstractRendererDirective<T extends Element, R extends AbstractLitRenderer> extends Directive {
    previousValue: unknown;
    constructor(part: PartInfo);
    render(_renderer: R, _value?: unknown): typeof nothing;
    update(part: ElementPart, [renderer, value]: [R, unknown]): unknown;
    hasChanged(value: unknown): boolean;
    /**
     * Set renderer callback to the element.
     */
    abstract addRenderer(element: T, renderer: R, options: RenderOptions): void;
    /**
     * Run renderer callback on the element.
     */
    abstract runRenderer(element: T): void;
}
//# sourceMappingURL=abstract-renderer.d.ts.map