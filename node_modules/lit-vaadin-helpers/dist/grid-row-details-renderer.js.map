{"version":3,"file":"grid-row-details-renderer.js","sourceRoot":"","sources":["../src/grid-row-details-renderer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAiC,MAAM,KAAK,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAmB,MAAM,kBAAkB,CAAC;AAE9D,OAAO,EAAE,yBAAyB,EAAE,MAAM,wBAAwB,CAAC;AACnE,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAQtC,MAAM,+BAAgC,SAAQ,yBAG7C;IACC;;OAEG;IACH,WAAW,CACT,OAAoB,EACpB,QAAsC,EACtC,OAAsB;QAEtB,OAAO,CAAC,kBAAkB,GAAG,CAC3B,IAAiB,EACjB,IAAkB,EAClB,KAAwB,EACxB,EAAE;YACF,IAAI,KAAK,EAAE;gBACT,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;gBACxB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAmB,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;aACtF;QACH,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,OAAoB;QAC9B,iEAAiE;QACjE,gEAAgE;QAChE,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;YACrB,OAAO,CAAC,oBAAoB,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,MAAM,iBAAiB,GAAG,SAAS,CAAC,+BAA+B,CAAC,CAAC;AAErE,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,QAAsC,EACtC,KAAe,EAC0C,EAAE,CAC3D,iBAAiB,CAAC,QAA8C,EAAE,KAAK,CAAC,CAAC","sourcesContent":["import { render, RenderOptions, TemplateResult } from 'lit';\nimport { directive, DirectiveResult } from 'lit/directive.js';\nimport { GridElement, GridItemModel } from '@vaadin/vaadin-grid';\nimport { AbstractRendererDirective } from './abstract-renderer.js';\nimport { debounce } from './utils.js';\n\nexport type GridRowDetailsLitRenderer<T> = (\n  item: T,\n  model: GridItemModel<T>,\n  grid: GridElement\n) => TemplateResult;\n\nclass GridRowDetailsRendererDirective extends AbstractRendererDirective<\n  GridElement,\n  GridRowDetailsLitRenderer<unknown>\n> {\n  /**\n   * Set renderer callback to the element.\n   */\n  addRenderer<T>(\n    element: GridElement,\n    renderer: GridRowDetailsLitRenderer<T>,\n    options: RenderOptions\n  ) {\n    element.rowDetailsRenderer = (\n      root: HTMLElement,\n      grid?: GridElement,\n      model?: GridItemModel<T>\n    ) => {\n      if (model) {\n        const item = model.item;\n        render(renderer.call(options.host, item, model, grid as GridElement), root, options);\n      }\n    };\n  }\n\n  /**\n   * Run renderer callback on the element.\n   */\n  runRenderer(element: GridElement) {\n    // Only call grid.requestContentUpdate() once per property change\n    // in case if that property is used by several column renderers.\n    debounce(element, () => {\n      element.requestContentUpdate();\n    });\n  }\n}\n\nconst rendererDirective = directive(GridRowDetailsRendererDirective);\n\nexport const gridRowDetailsRenderer = <T>(\n  renderer: GridRowDetailsLitRenderer<T>,\n  value?: unknown\n): DirectiveResult<typeof GridRowDetailsRendererDirective> =>\n  rendererDirective(renderer as GridRowDetailsLitRenderer<unknown>, value);\n"]}