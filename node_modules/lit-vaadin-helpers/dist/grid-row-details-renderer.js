import { render } from 'lit';
import { directive } from 'lit/directive.js';
import { AbstractRendererDirective } from './abstract-renderer.js';
import { debounce } from './utils.js';
class GridRowDetailsRendererDirective extends AbstractRendererDirective {
    /**
     * Set renderer callback to the element.
     */
    addRenderer(element, renderer, options) {
        element.rowDetailsRenderer = (root, grid, model) => {
            if (model) {
                const item = model.item;
                render(renderer.call(options.host, item, model, grid), root, options);
            }
        };
    }
    /**
     * Run renderer callback on the element.
     */
    runRenderer(element) {
        // Only call grid.requestContentUpdate() once per property change
        // in case if that property is used by several column renderers.
        debounce(element, () => {
            element.requestContentUpdate();
        });
    }
}
const rendererDirective = directive(GridRowDetailsRendererDirective);
export const gridRowDetailsRenderer = (renderer, value) => rendererDirective(renderer, value);
//# sourceMappingURL=grid-row-details-renderer.js.map